name: Deploy application
run-name: Deploy application to ${{ inputs.environment }}

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Deployment environment
        required: true
        type: choice
        options:
          - qa
          - test
          - preview
          - training
          - production
          - sandbox-alpha
          - sandbox-beta
      git_sha_to_deploy:
        description: The git commit SHA to deploy.
        required: false
        type: string
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      git_sha_to_deploy:
        description: The git commit SHA to deploy.
        required: true
        type: string

permissions: { }

concurrency:
  group: deploy-mavis-${{ inputs.environment }}

env:
  aws-role: ${{ inputs.environment == 'production'
    && 'arn:aws:iam::820242920762:role/GithubDeployECSService'
    || 'arn:aws:iam::393416225559:role/GithubDeployECSService' }}

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - name: Validate inputs
        run: |
          if [[ "${{ inputs.environment }}" == "preview" || "${{ inputs.environment }}" == "production" ]]; then
            if [[ -z "${{ inputs.git_sha_to_deploy }}" ]]; then
              echo "Error: git_sha_to_deploy is required for preview and production environments."
              exit 1
            fi
          fi

  determine-git-sha:
    runs-on: ubuntu-latest
    permissions: {}
    needs: validate-inputs
    outputs:
      git-sha: ${{ steps.get-git-sha.outputs.git-sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.git_ref_to_deploy || github.sha }}
      - name: Get git sha
        id: get-git-sha
        run: echo "git-sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

  build-and-push-image:
    permissions:
      id-token: write
    needs: determine-git-sha
    uses: ./.github/workflows/build-and-push-image.yml
    with:
      git-sha: ${{ needs.determine-git-sha.outputs.git-sha }}

  prepare-deployment:
    name: Prepare deployment
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.aws-role }}
          aws-region: eu-west-2
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: 3.13.0
          cache: poetry
      - name: Populate task definition
        id: populate-task-definition
        run: |
          python3 script/populate_task_definition.py ${{ inputs.environment }} \
            -i "${{ inputs.git_sha_to_deploy || github.sha }}" \
            -o task-definition.json
          cat task-definition.json
      - name: Make artifact for web task definition
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.environment }}-task-definition
          path: task-definition.json

  deploy:
    name: Deploy reporting service
    runs-on: ubuntu-latest
    needs: prepare-deployment
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.aws-role }}
          aws-region: eu-west-2
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Download web task definition artifact
        uses: actions/download-artifact@v5
        with:
          path: ${{ runner.temp }}
          name: ${{ inputs.environment }}-web-task-definition
      - name: Register web task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ runner.temp }}/web-task-definition.json
      - name: Create appspec.yml
        run: |
          cp config/templates/appspec.yaml.tpl appspec.yaml
      - name: Deploy web service with CodeDeploy
        id: deploy-web-service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ runner.temp }}/web-task-definition.json
          codedeploy-appspec: appspec.yaml
          cluster: ${{ env.cluster_name }}
          service: ${{ env.web_service }}
          codedeploy-application: ${{ env.web_codedeploy_application }}
          codedeploy-deployment-group: ${{ env.web_codedeploy_group }}
      - name: Wait for deployment to complete
        run: |
          echo "Waiting for CodeDeploy deployment ${{ steps.deploy-web-service.outputs.codedeploy-deployment-id }} to complete..."
          aws deploy wait deployment-successful --deployment-id "${{ steps.deploy-web-service.outputs.codedeploy-deployment-id }}"
          echo "Deployment successful"